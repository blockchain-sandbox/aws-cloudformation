---
AWSTemplateFormatVersion: '2010-09-09'

Description: Lambda functions

# Metadata:

# Parameters:

# Mappings:

# Conditions:

# Transform:

Resources:

# Lambda Functions

  UpdateServiceFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-update-service
      Handler: index.handler
      Role: !GetAtt UpdateServiceExecutionRole.Arn
      Code:
        ZipFile: |
          var aws = require('aws-sdk');
          var ecs = new aws.ECS();
          exports.handler = (event, context) => {
              console.log('EVENT:', JSON.stringify(event, null, 2));
              ecs.updateService(event, function(error, data) {
                  if (error) console.log(error, error.stack);
                  else       console.log(data);
              });
          };
      Runtime: nodejs6.10
      Timeout: 10
    # DependsOn:
    #   - UpdateServiceLogGroup
    Metadata:
      Cost: $0.20/1M Requests

  UpdateServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  # FIX
                  - ecs:*
                  # - ecs:UpdateService
                  # - ec2:*
                  # - route53:*
                  # - s3:*
                  # - ecr:*
                  # - lambda:UpdateFunctionConfiguration
                Resource: '*'

  UpdateServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-update-service
      RetentionInDays: 1

  StopInstanceFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-stop-instance
      Handler: index.handler
      Role: !GetAtt StopInstanceExecutionRole.Arn
      Code:
        ZipFile: |
          let aws = require('aws-sdk');
          let ec2 = new aws.EC2();
          exports.handler = async (event) => {
              console.log('INPUT', event);
              let id = event.id;
              try {
                  let data = await ec2.stopInstances({ InstanceIds: [ id ] }).promise();
                  console.log('DATA', data);
              } catch(error) {
                  throw new Error(error);
              }
          };
      Runtime: nodejs6.10
      Timeout: 10
    # DependsOn:
    #   - Route53UpsertLogGroup
    Metadata:
      Cost: $0.20/1M Requests

  StopInstanceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - ec2:StopInstances
                Resource: '*'
                # Resource: !Sub arn:aws:route53:::${hosted zone}/${hosted zone ID}

  StopInstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-stop-instance
      RetentionInDays: 1

  OnRunningFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-update-name-on-running
      Handler: index.handler
      Role: !GetAtt OnRunningExecutionRole.Arn
      Code:
        ZipFile: |
          let aws = require('aws-sdk');
          let ec2 = new aws.EC2();
          let route53 = new aws.Route53();
          exports.handler = async (event) => {
              console.log('INPUT', event);
              let results = event.match(/^(i-.+), (.+), (.+)$/);
              if (!results) {
                  throw new Error('Use pattern: <id>, <zone>, <host>');
              }
              let id = results[1];
              let zone = results[2];
              let name = results[3];
              try {
                  let data = await ec2.describeInstances({ InstanceIds: [ id ] }).promise();
                  let ip = data.Reservations[0].Instances[0].PublicIpAddress;
                  let params = {
                      ChangeBatch: {
                          Changes: [{
                              Action: "UPSERT", 
                              ResourceRecordSet: {
                                  Name: name, 
                                  ResourceRecords: [{Value: ip}],
                                  TTL: 60, 
                                  Type: "A"
                              }
                          }],
                      },
                      HostedZoneId: zone
                  };
                  console.log('UPSERT', JSON.stringify(params, null,2));
                  data = await route53.changeResourceRecordSets(params).promise();
                  console.log('DATA', data);
              } catch(error) {
                  throw new Error(error);
              }
          };      
      Runtime: nodejs6.10
      Timeout: 10
    # DependsOn:
    #   - Route53UpsertLogGroup
    Metadata:
      Cost: $0.20/1M Requests

  OnRunningExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - route53:ChangeResourceRecordSets
                Resource: '*'
                # Resource: !Sub arn:aws:route53:::${hosted zone}/${hosted zone ID}

  OnRunningLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-update-name-on-running
      RetentionInDays: 1

  Route53UpsertFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-route53-upsert
      Handler: index.handler
      Role: !GetAtt Route53UpsertExecutionRole.Arn
      Code:
        ZipFile: |
          let aws = require('aws-sdk');
          let ecs = new aws.ECS();
          let ec2 = new aws.EC2();
          let route53 = new aws.Route53();
          exports.handler = async (event) => {
              console.log('INPUT', event);
              let results = event.match(/^(arn:.+), (arn:.+), (.+), (.+)$/);
              if (!results) {
                  throw new Error('Use pattern: <cluster>, <task>, <zone>, <host>');
              }
              let cluster = results[1];
              let task = results[2];
              let zone = results[3];
              let name = results[4];
              try {
                  let data = await ecs.describeTasks({
                      cluster: cluster,
                      tasks: [ task ]
                  }).promise();
                  let eni = data.tasks[0].attachments[0].details.filter(
                      v => v.name === 'networkInterfaceId'
                  )[0]['value'];
                  data = await ec2.describeNetworkInterfaces({
                      NetworkInterfaceIds: [ eni ]
                  }).promise();
                  let ip = data.NetworkInterfaces[0].Association.PublicIp;
                  let params = {
                      ChangeBatch: {
                          Changes: [{
                              Action: "UPSERT", 
                              ResourceRecordSet: {
                                  Name: name, 
                                  ResourceRecords: [{Value: ip}],
                                  TTL: 60, 
                                  Type: "A"
                              }
                          }],
                      },
                      HostedZoneId: zone
                  };
                  console.log('UPSERT', JSON.stringify(params, null,2));
                  data = await route53.changeResourceRecordSets(params).promise();
              } catch(error) {
                  throw new Error(error);
              }
          };
      Runtime: nodejs6.10
      Timeout: 10
    # DependsOn:
    #   - Route53UpsertLogGroup
    Metadata:
      Cost: $0.20/1M Requests

  Route53UpsertExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeNetworkInterfaces
                  - ecs:DescribeTasks
                  - route53:ChangeResourceRecordSets
                Resource: '*'
                # Resource: !Sub arn:aws:route53:::${hosted zone}/${hosted zone ID}

  Route53UpsertLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-route53-upsert
      RetentionInDays: 1

  PutParameterFunction: 
    Type: AWS::Lambda::Function
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-put-parameter
      Handler: index.handler
      Role: !GetAtt PutParameterExecutionRole.Arn
      Code:
        ZipFile: |
          let aws = require('aws-sdk');
          let ecs = new aws.ECS();
          let ec2 = new aws.EC2();
          var ssm = new aws.SSM();
          exports.handler = async (event) => {
              console.log('INPUT', event);
              let results = event.match(/^(arn:.+), (arn:.+), (.+)$/);
              if (!results) {
                  throw new Error('Use pattern: <cluster>, <task>, <host>');
              }
              let cluster = results[1];
              let task = results[2];
              let name = results[3];
              try {
                  let data = await ecs.describeTasks({
                      cluster: cluster,
                      tasks: [ task ]
                  }).promise();
                  let eni = data.tasks[0].attachments[0].details.filter(
                      v => v.name === 'networkInterfaceId'
                  )[0]['value'];
                  data = await ec2.describeNetworkInterfaces({
                      NetworkInterfaceIds: [ eni ]
                  }).promise();
                  let ip = data.NetworkInterfaces[0].Association.PublicIp;
                  let params = {
                    Name: name,
                    Type: 'String',
                    Value: ip,
                    Overwrite: true
                  };
                  console.log('PARAMS', JSON.stringify(params, null,2));
                  data = await ssm.putParameter(params).promise();
              } catch(error) {
                  throw new Error(error);
              }
          };
      Runtime: nodejs6.10
      Timeout: 10
    # DependsOn:
    #   - UpdateParameterStoreLogGroup
    Metadata:
      Cost: $0.20/1M Requests

  PutParameterExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource: '*'

  PutParameterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-put-parameter
      RetentionInDays: 1

  LambdaUpdateConfigFunction: 
    Type: AWS::Lambda::Function
    DependsOn: LambdaUpdateConfigLogGroup
    Properties: 
      FunctionName: !Sub ${AWS::StackName}-lambda-update-config
      Handler: index.handler
      Role: !GetAtt LambdaUpdateConfigExecutionRole.Arn
      Code:
        ZipFile: |
          var response = require('cfn-response');
          var aws = require('aws-sdk');
          var lambda = new aws.Lambda();
          exports.handler = (event, context) => {
            console.log('EVENT:', JSON.stringify(event, null, 2));
            if (event.RequestType === 'Create') {
              lambda.updateFunctionConfiguration({
                FunctionName: event.ResourceProperties.FunctionName, 
                Runtime: event.ResourceProperties.Runtime
              }, (error, data) => {
                if (error) {
                  response.send(event, context, response.SUCCESS);
                } else {
                  response.send(event, context, response.SUCCESS);
                }
              });
            } else {
              response.send(event, context, response.SUCCESS);
            }
          };
      Runtime: nodejs6.10
      Timeout: 10

  LambdaUpdateConfigExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*
              - Effect: Allow
                Action:
                  - lambda:UpdateFunctionConfiguration
                Resource: '*'

  LambdaUpdateConfigLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}-lambda-update-config
      RetentionInDays: 1

# HACK: Custom Resource (remove when Cloudformation supports nodejs8.10)

  ConfigureRoute53UpsertFunctionOnCreate:
    Type: Custom::UpdateLambdaConfig
    Properties:
      ServiceToken: !GetAtt LambdaUpdateConfigFunction.Arn
      FunctionName: !Ref Route53UpsertFunction
      Runtime: nodejs8.10

  ConfigurePutParameterFunctionOnCreate:
    Type: Custom::UpdateLambdaConfig
    Properties:
      ServiceToken: !GetAtt LambdaUpdateConfigFunction.Arn
      FunctionName: !Ref PutParameterFunction
      Runtime: nodejs8.10

  ConfigureOnRunningOnCreate:
    Type: Custom::UpdateLambdaConfig
    Properties:
      ServiceToken: !GetAtt LambdaUpdateConfigFunction.Arn
      FunctionName: !Ref OnRunningFunction
      Runtime: nodejs8.10

  ConfigureStopInstanceOnCreate:
    Type: Custom::UpdateLambdaConfig
    Properties:
      ServiceToken: !GetAtt LambdaUpdateConfigFunction.Arn
      FunctionName: !Ref StopInstanceFunction
      Runtime: nodejs8.10

Outputs:

  UpdateServiceFunctionARN: 
    Description: ECS Update Service Lambda Function ARN
    Value: !GetAtt UpdateServiceFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-UpdateServiceFunctionARN

  StopInstanceFunctionARN:
    Description: Stop EC2 Instance
    Value: !GetAtt StopInstanceFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-StopInstanceFunctionARN

  OnRunningFunctionARN:
    Description: Update DNS for EC2
    Value: !GetAtt OnRunningFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-OnRunningFunctionARN

  Route53UpsertFunctionARN: 
    Description: Route 53 Upsert
    Value: !GetAtt Route53UpsertFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-Route53UpsertFunctionARN

  PutParameterFunctionARN: 
    Description: SSM Put Parameter
    Value: !GetAtt PutParameterFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-PutParameterFunctionARN
