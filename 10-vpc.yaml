---
AWSTemplateFormatVersion: '2010-09-09'

Description: VPC

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Availability Zones
        Parameters:
          - SingleAvailabilityZone
      - Label:
          default: DNS
        Parameters:
          - HostedZoneId
          - HostedZoneName
      - Label:
          default: Load Balancer
        Parameters:
          - LoadBalancerHostName
          - SSLCertificateArn
          - LoadBalancerLogging
          - LoadBalancerStickiness
    ParameterLabels:
      SingleAvailabilityZone:
        default: Single Availability Zone?
      HostedZoneId:
        default: Hosted Zone ID
      HostedZoneName:
        default: Domain Name
      LoadBalancerHostName:
        default: Hostname
      SSLCertificateArn:
        default: Certificate ARN
      LoadBalancerLogging:
        default: Access Logs
      LoadBalancerStickiness:
        default: Session Stickiness

Parameters:

  SingleAvailabilityZone:
    Description: Set to number of availability zones to use
    Type: String
    ConstraintDescription: Value must be true or false
    Default: true
    AllowedValues:
      - true
      - false

  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone Id
    Default: Z1FY5UX4CW1X78
    AllowedPattern: "(^$|^[A-Z0-9-]{1,20}$)"
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name

  HostedZoneName:
    Type: String
    Description: Route 53 Hosted Zone Name
    Default: blockchain-sandbox.org
    AllowedPattern: "(^$|^((?!-)[A-Za-z0-9-]{1,63}(?<!-)\\.)+[A-Za-z]{2,6}$)"
    ConstraintDescription: Please enter a valid Route 53 Hosted Zone Name. No trailing period.

  LoadBalancerHostName:
    Type: String
    Description: Domain will be appended
    Default: ethereum
    AllowedPattern: "(^$|^[A-Za-z0-9-]{1,63}$)"
    ConstraintDescription: Please enter a valid domain name

  SSLCertificateArn:
    Type: String
    Description: The SSL/TLS certificate ARN
    Default: arn:aws:acm:us-east-1:346590468712:certificate/51c42077-2901-42da-970e-a667a449a63c
    MinLength: 0
    MaxLength: 2048

  LoadBalancerLogging:
    Description: Create load balancer access logs
    Type: String
    ConstraintDescription: Value must be true or false
    Default: false
    AllowedValues:
      - true
      - false

  LoadBalancerStickiness:
    Description: Enable session stickiness
    Type: String
    ConstraintDescription: Value must be true or false
    Default: true
    AllowedValues:
      - true
      - false

Mappings:

  # Maps CIDR blocks to VPC and various subnets
  # A VPC spans all the Availability Zones in the region.
  # Each subnet must reside entirely within one Availability Zone. 
  # The first four and last address in each block are reserved.
  #   x.x.x.0   Network address
  #   x.x.x.1   VPC router
  #   x.x.x.2   DNS
  #   x.x.x.3   Future use
  #   x.x.x.255 Broadcast address
  CIDRMap:
    VPC:
      CIDR: 10.0.0.0/16
    Public1:
      CIDR: 10.0.10.0/24
    Public2:
      CIDR: 10.0.20.0/24
    Private1:
      CIDR: 10.0.11.0/24
    Private2:
      CIDR: 10.0.21.0/24

Conditions:

  SingleAZ: !Equals [ !Ref SingleAvailabilityZone, true ]

  MultipleAZs: !Not [ Condition: SingleAZ ]

  CreateRoute53Record: !And
    - !Not [ Condition: SingleAZ ]
    - !Not [ !Equals [ !Ref LoadBalancerHostName, "" ] ]
    - !Not [ !Equals [ !Ref HostedZoneName, "" ] ]

  CreateAccessLogs: !And
    - !Not [ Condition: SingleAZ ]
    - !Equals [ !Ref LoadBalancerLogging, true ]

  EnableStickiness: !And
    - !Not [ Condition: SingleAZ ]
    - !Equals [ !Ref LoadBalancerStickiness, true ]

# Transform:

Resources:

# VPC

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [CIDRMap, VPC, CIDR]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name 
          Value: !Ref AWS::StackName
    Metadata:
      Cost: free

# Subnets 

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !FindInMap [ CIDRMap, Public1, CIDR ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${AWS::StackName}-PublicSubnet1
    Metadata:
      Cost: free

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: MultipleAZs
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !FindInMap [ CIDRMap, Public2, CIDR ]
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name 
          Value: !Sub ${AWS::StackName}-PublicSubnet2
    Metadata:
      Cost: free

  # PrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [ 0, !GetAZs '' ]
  #     CidrBlock: !FindInMap [ CIDRMap, Private1, CIDR ]
  #     MapPublicIpOnLaunch: false
  #     Tags: 
  #       - Key: Name 
  #         Value: !Sub ${AWS::StackName}-PrivateSubnet1

  # PrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Condition: MultipleAZs
  #   Properties:
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select [ 1, !GetAZs '' ]
  #     CidrBlock: !FindInMap [ CIDRMap, Private2, CIDR ]
  #     MapPublicIpOnLaunch: false
  #     Tags: 
  #       - Key: Name 
  #         Value: !Sub ${AWS::StackName}-PrivateSubnet2

# Gateways

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: 
        - Key: Name 
          Value: !Sub ${AWS::StackName}-igw
    Metadata:
      Cost: free

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Metadata:
      Cost: free

  # NatGateway1EIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Properties: 
  #     Domain: vpc

  # NatGateway2EIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Condition: MultipleAZs
  #   # Condition: CreateMultipleNatGateways
  #   Properties:
  #     Domain: vpc

  # NatGateway1: 
  #   Type: AWS::EC2::NatGateway
  #   DependsOn: InternetGatewayAttachment
  #   Properties: 
  #     AllocationId: !GetAtt NatGateway1EIP.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  #     Tags: 
  #       - Key: Name 
  #         Value: !Sub ${AWS::StackName}-nat1
  #   Metadata:
  #     Cost: 0.045 ($/hour); 0.045 ($/GB)

  # NatGateway2: 
  #   Type: AWS::EC2::NatGateway
  #   DependsOn: InternetGatewayAttachment
  #   Condition: MultipleAZs
  #   # Condition: CreateMultipleNatGateways
  #   Properties:
  #     AllocationId: !GetAtt NatGateway2EIP.AllocationId
  #     SubnetId: !Ref PublicSubnet2
  #     Tags: 
  #       - Key: Name 
  #         Value: !Sub ${AWS::StackName}-nat2
  #   Metadata:
  #     Cost: 0.045 ($/hour); 0.045 ($/GB)

# Routing

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags: 
        - Key: Name 
          Value: !Sub ${AWS::StackName}-public-igw
    Metadata:
      Cost: free

  PublicRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    Metadata:
      Cost: free

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
    Metadata:
      Cost: free

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: MultipleAZs
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
    Metadata:
      Cost: free

  # PublicSubnet1NetworkAclAssociation:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnet1
  #     NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  # PublicSubnet2NetworkAclAssociation:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   Condition: MultipleAZs
  #   Properties:
  #     SubnetId: !Ref PublicSubnet2
  #     NetworkAclId: !GetAtt VPC.DefaultNetworkAcl

  # PrivateRouteTable1:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref VPC
  #     Tags: 
  #       - Key: Name 
  #         Value: !Sub ${AWS::StackName}-private-nat1

  # PrivateRouteTable2:
  #   Type: AWS::EC2::RouteTable
  #   Condition: MultipleAZs
  #   # Condition: CreateMultipleNatGateways
  #   Properties: 
  #     VpcId: !Ref VPC
  #     Tags: 
  #       - Key: Name 
  #         Value: !Sub ${AWS::StackName}-private-nat2

  # DefaultPrivateRoute1:
  #   Type: AWS::EC2::Route
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable1
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway1

  # DefaultPrivateRoute2:
  #   Type: AWS::EC2::Route
  #   DependsOn: InternetGatewayAttachment
  #   Condition: MultipleAZs
  #   # Condition: CreateMultipleNatGateways
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable2
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGateway2

  # PrivateSubnet1RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable1
  #     SubnetId: !Ref PrivateSubnet1

  # PrivateSubnet2RouteTableAssociationSingleNatGateway:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Condition: CreateSingleNatGateway
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable1
  #     SubnetId: !Ref PrivateSubnet2

  # PrivateSubnet2RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Condition: MultipleAZs
  #   # Condition: CreateMultipleNatGateways
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable2
  #     SubnetId: !Ref PrivateSubnet2

# Load Balancer

  PublicLoadBalancerRoute53Record:
    Type: AWS::Route53::RecordSet
    DependsOn: PublicLoadBalancer
    Condition: CreateRoute53Record
    Properties:
      Name: !Join ['.', [!Ref LoadBalancerHostName, !Ref HostedZoneName ]] 
      HostedZoneName: !Sub ${HostedZoneName}.
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt PublicLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt PublicLoadBalancer.DNSName
    Metadata:
      Cost: free

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: MultipleAZs
    Properties:
      GroupDescription: HTTP/HTTPS access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-PublicLoadBalancerSecurityGroup
    Metadata:
      Cost: free

  PublicLoadBalancerTargetGroup80:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: MultipleAZs
    Properties:
      Name: HTTP
      Protocol: HTTP
      Port: 80
      TargetType: ip
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 10
        - Key: stickiness.enabled
          Value: !If [EnableStickiness, true, false]
        # - Key: stickiness.type
        #   Value: lb_cookie
      Tags: 
        - Key: Name 
          Value: !Sub ${AWS::StackName}-PublicLoadBalancerTargetGroup80
    Metadata:
      Cost: free

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Condition: MultipleAZs
    Properties:
      Name: PublicLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: !If [CreateAccessLogs, true, false]
        - Key: access_logs.s3.bucket
          Value: !Ref Logs
      Tags: 
        - Key: Name 
          Value: !Sub ${AWS::StackName}-PublicLoadBalancer
    Metadata:
      Cost: 0.0225 ($/hour); 0.008 ($/LCU-hour)

  PublicLoadBalancerListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: MultipleAZs
    Properties:
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicLoadBalancerTargetGroup80
    Metadata:
      Cost: free

  PublicLoadBalancerListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: MultipleAZs
    Properties:
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref PublicLoadBalancerTargetGroup80
    Metadata:
      Cost: free

# Roles

  # VpcFlowLogsRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Action:
  #             - sts:AssumeRole
  #           Effect: Allow
  #           Principal:
  #             Service:
  #               - vpc-flow-logs.amazonaws.com
  #     Path: '/'
  #     Policies:
  #       - PolicyName: root
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Action:
  #                 - logs:CreateLogGroup
  #                 - logs:CreateLogStream
  #                 - logs:DescribeLogGroups
  #                 - logs:DescribeLogStreams
  #                 - logs:PutLogEvents
  #               Effect: Allow
  #               Resource: '*'

# Logging

  # LogsVPCEndpoint:
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     PolicyDocument:
  #       Statement: 
  #         - Effect: Allow
  #           Principal: '*'
  #           Action: 
  #             - s3:PutObject
  #           Resource: !Sub "arn:aws:s3:::${AWS::StackName}-logs/*"
  #     RouteTableIds:
  #       - !Ref PublicRouteTable
  #     ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
  #     VpcId: !Ref VPC

  # use Athena and Glue for log analysis
  Logs:
    Type: AWS::S3::Bucket
    Condition: MultipleAZs
    Properties:
      BucketName: !Sub ${AWS::StackName}-logs
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
    Metadata:
      Cost: free

  LogsPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: MultipleAZs
    Properties: 
      Bucket: !Ref Logs
      PolicyDocument:
        Statement: 
          - Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::127311923021:root  # us-east-1 load balancing account ID 
            Action: 
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${AWS::StackName}-logs/AWSLogs/${AWS::AccountId}/*"
    Metadata:
      Cost: free

  # VpcFlowLog:
  #     Type: AWS::EC2::FlowLog
  #     Properties:
  #       DeliverLogsPermissionArn: !GetAtt VpcFlowLogsRole.Arn
  #       LogGroupName: !Join [ '', [ !Ref 'AWS::StackName', '-FlowLog' ] ]
  #       ResourceId: !Ref Vpc
  #       ResourceType: VPC
  #       TrafficType: ALL

  # VpcFlowLogsLogGroup:
  #   Type: AWS::Logs::LogGroup

Outputs: 

  # SingleAvailabilityZone: 
  #   Description: If ture, single AZ used
  #   Value: !Ref SingleAvailabilityZone

  HostedZoneName:
    Description: Zone Name
    Value: !Ref HostedZoneName
    Export:
      Name: !Sub ${AWS::StackName}-HostedZoneName

  HostedZoneId:
    Description: Zone Name
    Value: !Ref HostedZoneId
    Export:
      Name: !Sub ${AWS::StackName}-HostedZoneId

  VPC: 
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VPC

  PublicSubnet1:
    Description: Public Subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1

  # PublicSubnet2:
  #   Description: Public Subnet 2
  #   # Condition: MultipleAZs
  #   Value: !Ref PublicSubnet2
  #   Export:
  #     Name: !Sub ${AWS::StackName}-PublicSubnet2

  # PublicLoadBalancerSecurityGroup:
  #   Description: Load balancer target group
  #   Condition: MultipleAZs
  #   Value: !Ref PublicLoadBalancerSecurityGroup
  #   Export:
  #     Name: !Sub ${AWS::StackName}-PublicLoadBalancerSecurityGroup

  # PublicLoadBalancerTargetGroup80:
  #   Description: Load balancer target group
  #   Condition: MultipleAZs
  #   Value: !Ref PublicLoadBalancerTargetGroup80
  #   Export:
  #     Name: !Sub ${AWS::StackName}-PublicLoadBalancerTargetGroup80
