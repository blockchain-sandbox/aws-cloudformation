---
AWSTemplateFormatVersion: 2010-09-09

Description: EC2 Instance

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parent Stacks
        Parameters:
          - VPCStackName
          - LambdaStackName
          - MonitorStackName
      - Label:
          default: DNS
        Parameters:
          - Name
      - Label:
          default: Instance
        Parameters:
          - AMI
          - Type
          - Key
          - StartCron
          - StopCron
          - Timezone
      - Label:
          default: Ethereum Network Statistics
        Parameters:
          - EthNetStatsSecret
    ParameterLabels:
      VPCStackName:
        default: Network Layer
      LambdaStackName:
        default: Lambda Functions
      MonitorStackName:
        default: Ethereum Monitor
      Name:
        default: Hostname
      Key:
        default: PEM Key
      Type:
        default: Type
      AMI:
        default: Machine Image
      StartCron:
        default: Start Schedule
      StopCron:
        default: Stop Schedule
      Timezone:
        default: Timezone
      EthNetStatsSecret:
        default: Eth-NetStats Secret

Parameters:

  VPCStackName:
    Description: Ends with '-vpc'
    Type: String
    MinLength: 1
    MaxLength: 32
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9-]*-vpc$"
    Default: blockchain-sandbox-vpc

  LambdaStackName:
    Description: Ends with '-lambda'
    Type: String
    MinLength: 1
    MaxLength: 32
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9-]*-lambda$"
    Default: blockchain-sandbox-lambda

  MonitorStackName:
    Description: Ends with '-ec2-monitor'
    Type: String
    MinLength: 1
    MaxLength: 32
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9-]*-monitor$"
    Default: blockchain-sandbox-monitor

  Name:
    Description: Hostname without domain
    Type: String
    Default: wallet

  Key: 
    Description: Used for SSH access
    Type: String
    Default: blockchain-sandbox-us-east-1

  Type: 
    Type: String
    Default: t2.medium

  AMI:
    Description: Default grabs latest Amazon Linux
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /blockchain-sandbox/ec2/ami

  StartCron:
    Description: Cron expression for starting this instance in GMT
    Type: String
    Default: cron(0 11 * * ? *)

  StopCron:
    Description: Cron expression for stopping this instance in GMT
    Type: String
    Default: cron(0 0,3,6,9,12,15,18,21 * * ? *)

  Timezone:
    Description: Local timezone
    Type: String
    Default: America/Chicago

  EthNetStatsSecret:
    Description: Ethereum Network Statistics secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /blockchain-sandbox/monitor/secret

  # BootnodeKey:
  #   Description: Ethereum Bootnode Key
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: /blockchain-sandbox/bootnode.key

  # Bootnodes:
  #   Description: Ethereum Boot Nodes
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: /blockchain-sandbox/bootnodes

Resources:

  Instance: 
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        configSets: 
          default: 
            - Common
            - Geth
            - Wallet
        Common:
          commands: 
            '10':
              command:
                !Join 
                  - ''
                  - - 'hostnamectl set-hostname '
                    - !Ref Name
                    - '.'
                    - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
            '20':
              command: !Sub timedatectl set-timezone ${Timezone}
            '30':
              command: add-apt-repository -y ppa:git-core/ppa
            '40':
              command: curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -
            '50':
              command: apt update
            '60':
              command: apt -y install git unzip jq nodejs build-essential nginx
            '70':
              command: curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
            '80':
              command: unzip awscli-bundle.zip
            '90':
              command: ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            '92':
              command: npm install npm@latest -g
        Geth:
          files:
            /home/ubuntu/config.toml:
              # https://github.com/ethereum/go-ethereum/wiki/Command-Line-Options
              # https://medium.com/mercuryprotocol/how-to-create-your-own-private-ethereum-blockchain-dad6af82fc9f
              content: !Sub |
                [Eth]
                NetworkId = 67
                SyncMode = "light"

                [Node]
                UserIdent = "${Name}"

                [Node.P2P]
                NoDiscovery = true

                [Ethstats]
                URL = "${Name}:{{secret}}@{{netstats}}"
              context:
                netstats: 
                  Fn::ImportValue: !Sub ${MonitorStackName}-Hostname
                secret: !Ref EthNetStatsSecret
              owner: ubuntu
              group: ubuntu
            /home/ubuntu/genesis.json:
              # https://arvanaghi.com/blog/explaining-the-genesis-block-in-ethereum/
              # https://github.com/ethereum/go-ethereum/blob/master/params/config.go
              # https://github.com/ethereum/go-ethereum/blob/master/core/genesis.go
              # https://ethereum.stackexchange.com/questions/2376/what-does-each-genesis-json-parameter-mean
              # timestamp: 12/12/2015 -> 1450072800 -> 566e5ae0
              content: |
                {
                  "alloc": {
                    "0x0000000000000000000000000000000000000001": {
                      "balance": "1"
                    },
                    "0x0000000000000000000000000000000000000002": {
                      "balance": "1"
                    },
                    "0x0000000000000000000000000000000000000003": {
                      "balance": "1"
                    },
                    "0x0000000000000000000000000000000000000004": {
                      "balance": "1"
                    }
                  },
                  "coinbase": "0x0000000000000000000000000000000000000000",
                  "config": {
                    "chainId": 67,
                    "eip150Block": 0,
                    "eip155Block": 10,
                    "eip158Block": 10,
                    "eip160Block": 10,
                    "homesteadBlock": 0
                  },
                  "difficulty": "0x10000",
                  "extraData": "0x3535353535353535353535353535353535353535353535353535353535353535",
                  "gasLimit": "0x1000000",
                  "mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "nonce": "0x0000000000000042",
                  "parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
                  "timestamp": "0x00"
                }
              owner: ubuntu
              group: ubuntu
            /home/ubuntu/start.sh:
              content: !Sub |
                #!/bin/bash

                if [ ! -d .ethereum ]; then
                  geth init genesis.json

                  (cat /dev/urandom | tr -dc A-Za-z0-9 | head -c 32; echo) > .ethereum/pw 2>/dev/null
                  chmod 0600 .ethereum/pw
                  geth --password .ethereum/pw account new

                  bootnode -genkey .ethereum/geth/nodekey
                fi

                nodekey=$(cat .ethereum/geth/nodekey)

                aws --region ${AWS::Region} ssm put-parameter \
                  --name /blockchain-sandbox/node/${Name} \
                  --value enode://$(bootnode -nodekeyhex $nodekey -writeaddress)@$(ec2metadata --public-ipv4):30303 \
                  --type String \
                  --overwrite

                aws --region ${AWS::Region} ssm get-parameters-by-path --path /blockchain-sandbox/node/ \
                  | jq '[.Parameters[].Value]' \
                  > .ethereum/static-nodes.json

                geth --config=config.toml --cache=512 --verbosity=3 --rpc --rpccorsdomain '*'
              owner: ubuntu
              group: ubuntu
              mode: "000755"
            /home/ubuntu/update-static-nodes.json:
              content: !Sub |
                #!/bin/bash
                aws --region ${AWS::Region} ssm get-parameters-by-path --path /blockchain-sandbox/node/ \
                  | jq '[.Parameters[].Value]' \
                  > .ethereum/static-nodes.json
              owner: ubuntu
              group: ubuntu
              mode: "000755"              
            /etc/systemd/system/node.service:
              content: |
                [Unit]
                Description=Geth Daemon
                After=network.target

                [Service]
                ExecStart=/home/ubuntu/start.sh
                User=ubuntu
                Group=ubuntu
                WorkingDirectory=/home/ubuntu
                Restart=on-failure

                [Install]
                WantedBy=default.target
          commands:
            '10':
              command: add-apt-repository -y ppa:ethereum/ethereum
            '20':
              command: apt update
            '30':
              command: apt -y install ethereum
            '40':
              command: systemctl enable node
            '50':
              command: systemctl start node
        Wallet:
          files:
            /etc/nginx/sites-available/default:
              content: |
                server {
                  listen 80;
                  root /home/ubuntu/etherwallet/dist;
                  index index.html;
                  server_name _;
                  location / {
                    try_files $uri $uri/ =404;
                  }
                }
          commands:
            '10':
              command: npm install -g gulp
            '20':
              command: git clone --depth 1 https://github.com/UTBadgeChain/etherwallet.git
              cwd: /home/ubuntu
            '30':
              command: npm install
              env:
                NODE_ENV: production
              cwd: /home/ubuntu/etherwallet
            '40':
              command: npm audit fix
              cwd: /home/ubuntu/etherwallet
            '50':
              command: npm run dist
              cwd: /home/ubuntu/etherwallet
            '60':
              command: chown -R ubuntu:ubuntu .
              cwd: /home/ubuntu/etherwallet
    Properties: 
      ImageId: !Ref AMI
      KeyName: !Ref Key
      InstanceType: !Ref Type
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces: 
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          GroupSet: 
            - !Ref DefaultSecurityGroup
            - !Ref TemporarySecurityGroup
          SubnetId:
            Fn::ImportValue: !Sub ${VPCStackName}-PublicSubnet1
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 10
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          if [ ! -x /usr/local/bin/cfn-init ]; then
            apt-get -y install python-setuptools
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          fi
          cfn-init --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance -c default
          cfn-signal --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance -e 0
          # Output in /var/log/cfn-init.log
      Tags:
        - Key: Name
          Value: !Ref Name
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT10M

  # EIP:
  #     Type: AWS::EC2::EIP
  #     Properties:
  #       InstanceId: !Ref Instance

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref InstanceRole

  InstanceRole: 
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ec2.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns: []
      Policies: 
        - PolicyName: AllowPutParameter
          PolicyDocument: 
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 
                  - ssm:GetParametersByPath
                  - ssm:PutParameter
                Resource: 
                  - '*'

# Security Groups

  DefaultSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${Name}-default
      GroupDescription: default
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8545
          ToPort: 8545
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 30303
          ToPort: 30303
        - CidrIp: 0.0.0.0/0
          IpProtocol: udp
          FromPort: 30303
          ToPort: 30303
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}-VPC

  TemporarySecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Name}-temporary
      GroupDescription: temporary
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}-VPC

# Route 52

  Hostname:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneId
      Name:
        !Join
          - ''
          - - !Ref Name
            - '.'
            - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
            - '.'
      Type: A
      TTL: 30
      ResourceRecords:
        - !GetAtt Instance.PublicIp
        # - !Ref EIP

# Events

  StopInstance:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub ${Name}-stop-instance
      Description: Stop EC2 instance
      ScheduleExpression: !Ref StopCron
      State: ENABLED
      Targets:
        - Id: 1
          Arn:
            Fn::ImportValue: !Sub ${LambdaStackName}-StopInstanceFunctionARN
          Input: !Sub '{"id":"${Instance}"}'

  StopInstancePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName:
        Fn::ImportValue: !Sub ${LambdaStackName}-StopInstanceFunctionARN
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopInstance.Arn

  UpdateHostname:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub ${AWS::StackName}-update-hostname
      Description: Update Route53 record
      EventPattern: 
        source: 
          - aws.ec2
        detail-type: 
          - "EC2 Instance State-change Notification"
        detail: 
          state: 
            - running
          instance-id: 
            - !Ref Instance
      State: ENABLED
      Targets:
        - Id: 1
          Arn:
            Fn::ImportValue: !Sub ${LambdaStackName}-OnRunningFunctionARN
          InputTransformer:
            InputPathsMap: 
              id: $.detail.instance-id
            InputTemplate:
              !Join
                - ''
                - - '"'
                  - !Ref Instance
                  - ', '
                  - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneId
                  - ', '
                  - !Ref Name
                  - '.'
                  - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
                  - '"'

  UpdateHostnamePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName:
        Fn::ImportValue: !Sub ${LambdaStackName}-OnRunningFunctionARN
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UpdateHostname.Arn

Outputs:

  URL:
    Description: Monitor URL
    Value: 
      !Join
        - ''
        - - 'http://'
          - !Ref Name
          - '.'
          - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
