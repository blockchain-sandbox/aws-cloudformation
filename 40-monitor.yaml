---
AWSTemplateFormatVersion: 2010-09-09

Description: EC2 Instance

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Parent Stacks
        Parameters:
          - VPCStackName
          - LambdaStackName
      - Label:
          default: DNS
        Parameters:
          - Name
      - Label:
          default: Instance
        Parameters:
          - AMI
          - Type
          - Key
          - StartCron
          - StopCron
          - Timezone
      - Label:
          default: Ethereum Network Statistics
        Parameters:
          - EthNetStatsSecret
    ParameterLabels:
      VPCStackName:
        default: Network Layer
      LambdaStackName:
        default: Lambda Functions
      Name:
        default: Hostname
      Key:
        default: PEM Key
      Type:
        default: Type
      AMI:
        default: Machine Image
      StartCron:
        default: Start Schedule
      StopCron:
        default: Stop Schedule
      Timezone:
        default: Timezone
      EthNetStatsSecret:
        default: Eth-NetStats Secret

Parameters:

  VPCStackName:
    Description: Ends with '-vpc'
    Type: String
    MinLength: 1
    MaxLength: 32
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9-]*-vpc$"
    Default: blockchain-sandbox-vpc

  LambdaStackName:
    Description: Ends with '-lambda'
    Type: String
    MinLength: 1
    MaxLength: 32
    AllowedPattern: "^[a-zA-Z][a-zA-Z0-9-]*-lambda$"
    Default: blockchain-sandbox-lambda

  # MonitorStackName:
  #   Description: Ends with '-ec2-monitor'
  #   Type: String
  #   MinLength: 1
  #   MaxLength: 32
  #   AllowedPattern: "^[a-zA-Z][a-zA-Z0-9]*-ec2-monitor$"
  #   Default: ethereum-ec2-monitor

  Name:
    Description: Hostname without domain
    Type: String
    Default: monitor

  Key: 
    Description: Used for SSH access
    Type: String
    Default: blockchain-sandbox-us-east-1

  Type: 
    Type: String
    Default: t2.medium                 # https://bugs.launchpad.net/ubuntu/+source/nginx/+bug/1581864

  AMI:
    Description: Default grabs latest Amazon Linux
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /blockchain-sandbox/ec2/ami

  # StartCron:
  #   Description: Cron expression for starting this instance in GMT
  #   Type: String
  #   Default: cron(0 11 * * ? *)

  StopCron:
    Description: Cron expression for stopping this instance in GMT
    Type: String
    Default: cron(0 0,3,6,9,12,15,18,21 * * ? *)

  Timezone:
    Description: Local timezone
    Type: String
    Default: America/Chicago

  EthNetStatsSecret:
    Description: Ethereum Network Statistics secret
    Type: AWS::SSM::Parameter::Value<String>
    Default: /blockchain-sandbox/monitor/secret

  # BootnodeKey:
  #   Description: Ethereum Bootnode Key
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: /blockchain-sandbox/bootnode.key

  # Bootnodes:
  #   Description: Ethereum Boot Nodes
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: /blockchain-sandbox/bootnodes

Resources:

  Instance: 
    Type: AWS::EC2::Instance
    Metadata: 
      AWS::CloudFormation::Init: 
        configSets: 
          default: 
            - Common
            - EthNetStats
        Common:
          commands: 
            '10':
              command:
                !Join 
                  - ''
                  - - 'hostnamectl set-hostname '
                    - !Ref Name
                    - '.'
                    - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
            '20':
              command: !Sub timedatectl set-timezone ${Timezone}
            '30':
              command: add-apt-repository -y ppa:git-core/ppa
            '40':
              command: apt update
            '50':
              command: apt -y install git unzip jq nodejs npm nginx
            '60':
              command: curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
            '70':
              command: unzip awscli-bundle.zip
            '80':
              command: ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
        EthNetStats:
          files:
            /etc/systemd/system/monitor.service:
              content: |
                [Unit]
                Description=Ethereum Network Stats Daemon
                After=network.target

                [Service]
                ExecStart=/usr/bin/npm start
                Environment=WS_SECRET={{secret}} HOST=127.0.0.1
                User=ubuntu
                Group=ubuntu
                WorkingDirectory=/home/ubuntu/eth-netstats
                Restart=on-failure

                [Install]
                WantedBy=default.target
              context: 
                secret: !Ref EthNetStatsSecret
                host: !Ref Name
                domain:
                  Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
            /etc/nginx/sites-available/default:
              content: |
                map $http_upgrade $connection_upgrade {
                    default upgrade;
                    ''      close;
                }
                server {
                  listen 80;
                  server_name _;
                  location / {
                    proxy_pass http://127.0.0.1:3000; 
                    proxy_http_version 1.1;
                    proxy_set_header Host $host;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection $connection_upgrade;
                  }
                }
          commands:
            '10':
              command: ln -s /usr/bin/nodejs /usr/bin/node
            '20':
              command: npm install -g grunt-cli
            '30':
              command: git clone --depth 1 https://github.com/UTBadgeChain/eth-netstats.git
              cwd: /home/ubuntu
            '40':
              command: npm install
              cwd: /home/ubuntu/eth-netstats
            '50':
              command: grunt
              cwd: /home/ubuntu/eth-netstats
            '60':
              command: chown -R ubuntu:ubuntu .
              cwd: /home/ubuntu/eth-netstats
            '70':
              command: systemctl enable monitor
            '80':
              command: systemctl start monitor
            '90':
              command: systemctl restart nginx
    Properties: 
      ImageId: !Ref AMI
      KeyName: !Ref Key
      InstanceType: !Ref Type
      NetworkInterfaces: 
        - DeviceIndex: 0
          AssociatePublicIpAddress: true
          GroupSet: 
            - !Ref DefaultSecurityGroup
            - !Ref TemporarySecurityGroup
          SubnetId:
            Fn::ImportValue: !Sub ${VPCStackName}-PublicSubnet1
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: 10
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          if [ ! -x /usr/local/bin/cfn-init ]; then
            apt-get -y install python-setuptools
            easy_install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          fi
          cfn-init --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance -c default
          cfn-signal --region ${AWS::Region} --stack ${AWS::StackName} --resource Instance -e 0
          # Output in /var/log/cfn-init.log
      Tags:
        - Key: Name
          Value: !Ref Name
    CreationPolicy: 
      ResourceSignal: 
        Timeout: PT12M

# Security Groups

  DefaultSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub ${Name}-default
      GroupDescription: default
      SecurityGroupIngress: 
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}-VPC

  TemporarySecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Name}-temporary
      GroupDescription: temporary
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
      VpcId:
        Fn::ImportValue: !Sub ${VPCStackName}-VPC

# Route 52

  Hostname:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneId
      Name:
        !Join
          - ''
          - - !Ref Name
            - '.'
            - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
            - '.'
      Type: A
      TTL: 30
      ResourceRecords:
        - !GetAtt Instance.PublicIp

# Events

  StopInstance:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub ${Name}-stop-instance
      Description: Stop EC2 instance
      ScheduleExpression: !Ref StopCron
      State: ENABLED
      Targets:
        - Id: 1
          Arn:
            Fn::ImportValue: !Sub ${LambdaStackName}-StopInstanceFunctionARN
          Input: !Sub '{"id":"${Instance}"}'

  StopInstancePermission: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName:
        Fn::ImportValue: !Sub ${LambdaStackName}-StopInstanceFunctionARN
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt StopInstance.Arn

  UpdateHostname:
    Type: AWS::Events::Rule
    Properties: 
      Name: !Sub ${AWS::StackName}-update-hostname
      Description: Update Route53 record
      EventPattern: 
        source: 
          - aws.ec2
        detail-type: 
          - "EC2 Instance State-change Notification"
        detail: 
          state: 
            - running
          instance-id: 
            - !Ref Instance
      State: ENABLED
      Targets:
        - Id: 1
          Arn:
            Fn::ImportValue: !Sub ${LambdaStackName}-OnRunningFunctionARN
          InputTransformer:
            InputPathsMap: 
              id: $.detail.instance-id
            InputTemplate:
              !Join
                - ''
                - - '"'
                  - !Ref Instance
                  - ', '
                  - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneId
                  - ', '
                  - !Ref Name
                  - '.'
                  - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
                  - '"'

  UpdateHostnamePermission:
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName:
        Fn::ImportValue: !Sub ${LambdaStackName}-OnRunningFunctionARN
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UpdateHostname.Arn

Outputs:

  Hostname:
    Description: Stats hostname
    Value: 
      !Join
        - ''
        - - !Ref Name
          - '.'
          - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
    Export:
      Name: !Sub ${AWS::StackName}-Hostname

  URL:
    Description: Monitor URL
    Value: 
      !Join
        - ''
        - - 'http://'
          - !Ref Name
          - '.'
          - Fn::ImportValue: !Sub ${VPCStackName}-HostedZoneName
